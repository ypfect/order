#docker.host=192.168.159.131
spring.main.allow-bean-definition-overriding=true
docker.host=aliyun
server.port=6687
#logging.level=debug
regCenter.serverList=${docker.host}:2181
regCenter.namespace=elastic-job-lite
slave.enable=true
#logging.level.root=debug
test=weixinsas
nacos.config.namespace=1c42d69d-3430-423b-93e9-2cea5cebb9e4
nacos.config.enabled=true
nacos.config.server-addr=aliyun:8848
# dubbo扫描的包，直接提供服务。  @Reference 直接标记为消费者
dubbo.registry.check=false
dubbo.consumer.check=false
dubbo.scan.base-packages=com.overstar.order.service
# Dubbo Protocol
dubbo.protocol.name=dubbo
## Random port
dubbo.protocol.port=-1
## Dubbo Registry
dubbo.registry.address=nacos://aliyun:8848
# Dubbo Application
dubbo.application.name=test-order
#Redisson 配置
spring.redis.database=0
spring.redis.host=${docker.host}
spring.redis.port=6379
spring.redis.password=changeme

#rocketMq
rocketmq.name-server=${docker.host}:9876
rocketmq.producer.group=test-order

dataflow-job.enable=false
simpleJob.cron=0/5 * * * * ?
simpleJob.shardingTotalCount=1
simpleJob.shardingItemParameters=


#sharding-jdbc
spring.shardingsphere.datasource.names=ds0

spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://aliyun:3306/overstar_order_0
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=changeme

spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds0.t_order_item_$->{0..1}

spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=id

spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item_$->{id % 2}

spring.shardingsphere.props.sql.show=true
